!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
ArgList	cmmtypes.h	/^typedef struct ArgList_ ArgList;$/;"	t	typeref:struct:ArgList_
ArgList_	cmmtypes.h	/^struct ArgList_{$/;"	s
ArgList_::next	cmmtypes.h	/^    ArgList* next;$/;"	m	struct:ArgList_	access:public
ArgList_::type	cmmtypes.h	/^    Type* type;$/;"	m	struct:ArgList_	access:public
Args	syntax.y	/^Args : Exp COMMA Args {$/;"	l
Args1	multi_tree.h	/^    Args1,$/;"	e	enum:__anon2
Args2	multi_tree.h	/^    Args2,$/;"	e	enum:__anon2
BISON	Makefile	/^BISON = bison$/;"	m
CC	Makefile	/^CC = gcc$/;"	m
CFILES	Makefile	/^CFILES = $(shell find .\/ -name "*.c")$/;"	m
CFLAGS	Makefile	/^CFLAGS = -std=gnu99 -Wall -Wno-unused-function$/;"	m
CompSt	multi_tree.h	/^    CompSt,$/;"	e	enum:__anon2
CompSt	syntax.y	/^CompSt : LC DefList StmtList RC {$/;"	l
DECLTYPE	uthash.h	37;"	d
DECLTYPE	uthash.h	40;"	d
DECLTYPE	uthash.h	44;"	d
DECLTYPE	uthash.h	46;"	d
DECLTYPE_ASSIGN	uthash.h	50;"	d
DECLTYPE_ASSIGN	uthash.h	56;"	d
Dec	syntax.y	/^Dec : VarDec {$/;"	l
Dec1	multi_tree.h	/^    Dec1,$/;"	e	enum:__anon2
Dec2	multi_tree.h	/^    Dec2,$/;"	e	enum:__anon2
DecList	syntax.y	/^DecList : Dec {$/;"	l
DecList1	multi_tree.h	/^    DecList1,$/;"	e	enum:__anon2
DecList2	multi_tree.h	/^    DecList2,$/;"	e	enum:__anon2
Def	multi_tree.h	/^    Def,$/;"	e	enum:__anon2
Def	syntax.y	/^Def : Specifier DecList SEMI {$/;"	l
DefList	syntax.y	/^DefList : Def DefList {$/;"	l
DefList1	multi_tree.h	/^    DefList1,$/;"	e	enum:__anon2
DefList2	multi_tree.h	/^    DefList2,$/;"	e	enum:__anon2
ELMT_FROM_HH	uthash.h	101;"	d
EMPTY	multi_tree.h	/^	EMPTY$/;"	e	enum:__anon2
Exp	syntax.y	/^Exp : Exp ASSIGNOP Exp {$/;"	l
Exp1	multi_tree.h	/^    Exp1,$/;"	e	enum:__anon2
Exp10	multi_tree.h	/^    Exp10,$/;"	e	enum:__anon2
Exp11	multi_tree.h	/^    Exp11,$/;"	e	enum:__anon2
Exp12	multi_tree.h	/^    Exp12,$/;"	e	enum:__anon2
Exp13	multi_tree.h	/^    Exp13,$/;"	e	enum:__anon2
Exp14	multi_tree.h	/^    Exp14,$/;"	e	enum:__anon2
Exp15	multi_tree.h	/^    Exp15,$/;"	e	enum:__anon2
Exp16	multi_tree.h	/^    Exp16,$/;"	e	enum:__anon2
Exp17	multi_tree.h	/^    Exp17,$/;"	e	enum:__anon2
Exp18	multi_tree.h	/^    Exp18,$/;"	e	enum:__anon2
Exp2	multi_tree.h	/^    Exp2,$/;"	e	enum:__anon2
Exp3	multi_tree.h	/^    Exp3,$/;"	e	enum:__anon2
Exp4	multi_tree.h	/^    Exp4,$/;"	e	enum:__anon2
Exp5	multi_tree.h	/^    Exp5,$/;"	e	enum:__anon2
Exp6	multi_tree.h	/^    Exp6,$/;"	e	enum:__anon2
Exp7	multi_tree.h	/^    Exp7,$/;"	e	enum:__anon2
Exp8	multi_tree.h	/^    Exp8,$/;"	e	enum:__anon2
Exp9	multi_tree.h	/^    Exp9,$/;"	e	enum:__anon2
ExtDecList	syntax.y	/^ExtDecList : VarDec {$/;"	l
ExtDecList1	multi_tree.h	/^    ExtDecList1,$/;"	e	enum:__anon2
ExtDecList2	multi_tree.h	/^    ExtDecList2,$/;"	e	enum:__anon2
ExtDef	syntax.y	/^ExtDef : Specifier ExtDecList SEMI {$/;"	l
ExtDef1	multi_tree.h	/^    ExtDef1,$/;"	e	enum:__anon2
ExtDef2	multi_tree.h	/^    ExtDef2,$/;"	e	enum:__anon2
ExtDef3	multi_tree.h	/^    ExtDef3,$/;"	e	enum:__anon2
ExtDef4	multi_tree.h	/^    ExtDef4,$/;"	e	enum:__anon2
ExtDefList	syntax.y	/^ExtDefList : ExtDef ExtDefList {$/;"	l
ExtDefList1	multi_tree.h	/^    ExtDefList1,$/;"	e	enum:__anon2
ExtDefList2	multi_tree.h	/^    ExtDefList2,$/;"	e	enum:__anon2
FLEX	Makefile	/^FLEX = flex$/;"	m
FieldList	cmmtypes.h	/^typedef struct FieldList_ FieldList;$/;"	t	typeref:struct:FieldList_
FieldList_	cmmtypes.h	/^struct FieldList_{$/;"	s
FieldList_::name	cmmtypes.h	/^    char* name; \/\/field name$/;"	m	struct:FieldList_	access:public
FieldList_::next	cmmtypes.h	/^    FieldList* next; \/\/next field$/;"	m	struct:FieldList_	access:public
FieldList_::tail	cmmtypes.h	/^    FieldList* tail; \/\/$/;"	m	struct:FieldList_	access:public
FieldList_::type	cmmtypes.h	/^    Type* type; \/\/field type$/;"	m	struct:FieldList_	access:public
FunDec	syntax.y	/^FunDec : ID LP VarList RP {$/;"	l
FunDec1	multi_tree.h	/^    FunDec1,$/;"	e	enum:__anon2
FunDec2	multi_tree.h	/^    FunDec2,$/;"	e	enum:__anon2
Func_Args1	semantic2.c	/^void Func_Args1(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Args2	semantic2.c	/^void Func_Args2(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_CompSt	semantic2.c	/^void Func_CompSt(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Dec1	semantic2.c	/^void Func_Dec1(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Dec2	semantic2.c	/^void Func_Dec2(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_DecList1	semantic2.c	/^void Func_DecList1(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_DecList2	semantic2.c	/^void Func_DecList2(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Def	semantic2.c	/^void Func_Def(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_DefList1	semantic2.c	/^void Func_DefList1(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_DefList2	semantic2.c	/^void Func_DefList2(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_EMPTY	semantic2.c	/^void Func_EMPTY(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Exp1	semantic2.c	/^void Func_Exp1(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Exp10	semantic2.c	/^void Func_Exp10(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Exp11	semantic2.c	/^void Func_Exp11(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Exp12	semantic2.c	/^void Func_Exp12(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Exp13	semantic2.c	/^void Func_Exp13(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Exp14	semantic2.c	/^void Func_Exp14(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Exp15	semantic2.c	/^void Func_Exp15(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Exp16	semantic2.c	/^void Func_Exp16(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Exp17	semantic2.c	/^void Func_Exp17(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Exp18	semantic2.c	/^void Func_Exp18(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Exp2	semantic2.c	/^void Func_Exp2(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Exp3	semantic2.c	/^void Func_Exp3(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Exp4	semantic2.c	/^void Func_Exp4(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Exp5	semantic2.c	/^void Func_Exp5(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Exp6	semantic2.c	/^void Func_Exp6(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Exp7	semantic2.c	/^void Func_Exp7(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Exp8	semantic2.c	/^void Func_Exp8(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Exp9	semantic2.c	/^void Func_Exp9(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_ExtDecList1	semantic2.c	/^void Func_ExtDecList1(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_ExtDecList2	semantic2.c	/^void Func_ExtDecList2(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_ExtDef1	semantic2.c	/^void Func_ExtDef1(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_ExtDef2	semantic2.c	/^void Func_ExtDef2(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_ExtDef3	semantic2.c	/^void Func_ExtDef3(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_ExtDef4	semantic2.c	/^void Func_ExtDef4(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_ExtDefList1	semantic2.c	/^void Func_ExtDefList1(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_ExtDefList2	semantic2.c	/^void Func_ExtDefList2(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_FunDec1	semantic2.c	/^void Func_FunDec1(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_FunDec2	semantic2.c	/^void Func_FunDec2(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_OptTag	semantic2.c	/^void Func_OptTag(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_ParamDec	semantic2.c	/^void Func_ParamDec(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Program	semantic2.c	/^void Func_Program(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Specifier1	semantic2.c	/^void Func_Specifier1(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Specifier2	semantic2.c	/^void Func_Specifier2(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Stmt1	semantic2.c	/^void Func_Stmt1(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Stmt2	semantic2.c	/^void Func_Stmt2(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Stmt3	semantic2.c	/^void Func_Stmt3(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Stmt4	semantic2.c	/^void Func_Stmt4(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Stmt5	semantic2.c	/^void Func_Stmt5(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Stmt6	semantic2.c	/^void Func_Stmt6(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_StmtList1	semantic2.c	/^void Func_StmtList1(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_StmtList2	semantic2.c	/^void Func_StmtList2(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_StructSpecifier1	semantic2.c	/^void Func_StructSpecifier1(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_StructSpecifier2	semantic2.c	/^void Func_StructSpecifier2(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_TYPE	semantic2.c	/^void Func_TYPE(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_Tag	semantic2.c	/^void Func_Tag(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_VarDec1	semantic2.c	/^void Func_VarDec1(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_VarDec2	semantic2.c	/^void Func_VarDec2(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_VarList1	semantic2.c	/^void Func_VarList1(MTnode* root)$/;"	f	signature:(MTnode* root)
Func_VarList2	semantic2.c	/^void Func_VarList2(MTnode* root)$/;"	f	signature:(MTnode* root)
HASH_ADD	uthash.h	169;"	d
HASH_ADD_INT	uthash.h	269;"	d
HASH_ADD_KEYPTR	uthash.h	182;"	d
HASH_ADD_PTR	uthash.h	275;"	d
HASH_ADD_STR	uthash.h	263;"	d
HASH_ADD_TO_BKT	uthash.h	625;"	d
HASH_BER	uthash.h	364;"	d
HASH_BKT_CAPACITY_THRESH	uthash.h	98;"	d
HASH_BLOOM_ADD	uthash.h	136;"	d
HASH_BLOOM_ADD	uthash.h	145;"	d
HASH_BLOOM_BITLEN	uthash.h	117;"	d
HASH_BLOOM_BITSET	uthash.h	133;"	d
HASH_BLOOM_BITTEST	uthash.h	134;"	d
HASH_BLOOM_BYTELEN	uthash.h	118;"	d
HASH_BLOOM_BYTELEN	uthash.h	147;"	d
HASH_BLOOM_FREE	uthash.h	128;"	d
HASH_BLOOM_FREE	uthash.h	144;"	d
HASH_BLOOM_MAKE	uthash.h	119;"	d
HASH_BLOOM_MAKE	uthash.h	143;"	d
HASH_BLOOM_SIGNATURE	uthash.h	917;"	d
HASH_BLOOM_TEST	uthash.h	139;"	d
HASH_BLOOM_TEST	uthash.h	146;"	d
HASH_CLEAR	uthash.h	863;"	d
HASH_CNT	uthash.h	893;"	d
HASH_COUNT	uthash.h	892;"	d
HASH_DEL	uthash.h	279;"	d
HASH_DELETE	uthash.h	224;"	d
HASH_DEL_IN_BKT	uthash.h	639;"	d
HASH_EMIT_KEY	uthash.h	346;"	d
HASH_EMIT_KEY	uthash.h	353;"	d
HASH_EXPAND_BUCKETS	uthash.h	680;"	d
HASH_FCN	uthash.h	358;"	d
HASH_FCN	uthash.h	360;"	d
HASH_FIND	uthash.h	103;"	d
HASH_FIND_INT	uthash.h	267;"	d
HASH_FIND_IN_BKT	uthash.h	611;"	d
HASH_FIND_PTR	uthash.h	273;"	d
HASH_FIND_STR	uthash.h	261;"	d
HASH_FNV	uthash.h	389;"	d
HASH_FSCK	uthash.h	287;"	d
HASH_FSCK	uthash.h	339;"	d
HASH_INITIAL_NUM_BUCKETS	uthash.h	96;"	d
HASH_INITIAL_NUM_BUCKETS_LOG2	uthash.h	97;"	d
HASH_ITER	uthash.h	882;"	d
HASH_ITER	uthash.h	886;"	d
HASH_JEN	uthash.h	430;"	d
HASH_JEN_MIX	uthash.h	417;"	d
HASH_KEYCMP	uthash.h	608;"	d
HASH_MAKE_TABLE	uthash.h	150;"	d
HASH_MUR	uthash.h	568;"	d
HASH_OAT	uthash.h	401;"	d
HASH_OOPS	uthash.h	286;"	d
HASH_OVERHEAD	uthash.h	874;"	d
HASH_REPLACE	uthash.h	172;"	d
HASH_REPLACE_INT	uthash.h	271;"	d
HASH_REPLACE_PTR	uthash.h	277;"	d
HASH_REPLACE_STR	uthash.h	265;"	d
HASH_SAX	uthash.h	378;"	d
HASH_SELECT	uthash.h	825;"	d
HASH_SFH	uthash.h	482;"	d
HASH_SIGNATURE	uthash.h	916;"	d
HASH_SORT	uthash.h	732;"	d
HASH_SRT	uthash.h	733;"	d
HASH_TO_BKT	uthash.h	207;"	d
LFC	Makefile	/^LFC = $(shell find .\/ -name "*.l" | sed s\/[^\/]*\\\\.l\/lex.yy.c\/)$/;"	m
LFILE	Makefile	/^LFILE = $(shell find .\/ -name "*.l")$/;"	m
LFO	Makefile	/^LFO = $(LFC:.c=.o)$/;"	m
Log	debug.h	6;"	d
MTnode	multi_tree.h	/^typedef struct MTnode{$/;"	s
MTnode	multi_tree.h	/^}MTnode;$/;"	t	typeref:struct:MTnode
MTnode::__anon1::valf	multi_tree.h	/^        double valf;$/;"	m	union:MTnode::__anon1	access:public
MTnode::__anon1::valt	multi_tree.h	/^        int valt;$/;"	m	union:MTnode::__anon1	access:public
MTnode::children_amount	multi_tree.h	/^	int children_amount;$/;"	m	struct:MTnode	access:public
MTnode::children_list	multi_tree.h	/^	struct MTnode** children_list;$/;"	m	struct:MTnode	typeref:struct:MTnode::MTnode	access:public
MTnode::inh_ctrl	multi_tree.h	/^    int inh_ctrl;$/;"	m	struct:MTnode	access:public
MTnode::inh_dim	multi_tree.h	/^    int inh_dim;$/;"	m	struct:MTnode	access:public
MTnode::inh_type	multi_tree.h	/^    Type* inh_type;$/;"	m	struct:MTnode	access:public
MTnode::location	multi_tree.h	/^	YYLTYPE location;$/;"	m	struct:MTnode	access:public
MTnode::str	multi_tree.h	/^	char* str;$/;"	m	struct:MTnode	access:public
MTnode::syn_al	multi_tree.h	/^    ArgList* syn_al;$/;"	m	struct:MTnode	access:public
MTnode::syn_fl	multi_tree.h	/^    FieldList* syn_fl;$/;"	m	struct:MTnode	access:public
MTnode::syn_type	multi_tree.h	/^    Type* syn_type;$/;"	m	struct:MTnode	access:public
MTnode::type	multi_tree.h	/^	int type;$/;"	m	struct:MTnode	access:public
MUR_FMIX	uthash.h	559;"	d
MUR_GETBLOCK	uthash.h	537;"	d
MUR_GETBLOCK	uthash.h	553;"	d
MUR_ONE_THREE	uthash.h	547;"	d
MUR_ONE_THREE	uthash.h	551;"	d
MUR_PLUS0_ALIGNED	uthash.h	539;"	d
MUR_PLUS1_ALIGNED	uthash.h	540;"	d
MUR_PLUS2_ALIGNED	uthash.h	541;"	d
MUR_PLUS3_ALIGNED	uthash.h	542;"	d
MUR_ROTL32	uthash.h	558;"	d
MUR_THREE_ONE	uthash.h	545;"	d
MUR_THREE_ONE	uthash.h	549;"	d
MUR_TWO_TWO	uthash.h	546;"	d
MUR_TWO_TWO	uthash.h	550;"	d
NO_DECLTYPE	uthash.h	39;"	d
NO_DECLTYPE	uthash.h	43;"	d
OBJS	Makefile	/^OBJS = $(CFILES:.c=.o)$/;"	m
OptTag	multi_tree.h	/^    OptTag,$/;"	e	enum:__anon2
OptTag	syntax.y	/^OptTag : ID {$/;"	l
ParamDec	multi_tree.h	/^    ParamDec,$/;"	e	enum:__anon2
ParamDec	syntax.y	/^ParamDec : Specifier VarDec {$/;"	l
Program	multi_tree.h	/^	Program,$/;"	e	enum:__anon2
Program	syntax.y	/^Program : ExtDefList {$/;"	l
Specifier	syntax.y	/^Specifier : TYPE {$/;"	l
Specifier1	multi_tree.h	/^    Specifier1,$/;"	e	enum:__anon2
Specifier2	multi_tree.h	/^    Specifier2,$/;"	e	enum:__anon2
Stmt	syntax.y	/^Stmt : Exp SEMI {$/;"	l
Stmt1	multi_tree.h	/^    Stmt1,$/;"	e	enum:__anon2
Stmt2	multi_tree.h	/^    Stmt2,$/;"	e	enum:__anon2
Stmt3	multi_tree.h	/^    Stmt3,$/;"	e	enum:__anon2
Stmt4	multi_tree.h	/^    Stmt4,$/;"	e	enum:__anon2
Stmt5	multi_tree.h	/^    Stmt5,$/;"	e	enum:__anon2
Stmt6	multi_tree.h	/^    Stmt6,$/;"	e	enum:__anon2
StmtList	syntax.y	/^StmtList : Stmt StmtList {$/;"	l
StmtList1	multi_tree.h	/^    StmtList1,$/;"	e	enum:__anon2
StmtList2	multi_tree.h	/^    StmtList2,$/;"	e	enum:__anon2
StructSpecifier	syntax.y	/^StructSpecifier : STRUCT OptTag LC DefList RC {$/;"	l
StructSpecifier1	multi_tree.h	/^    StructSpecifier1,$/;"	e	enum:__anon2
StructSpecifier2	multi_tree.h	/^    StructSpecifier2,$/;"	e	enum:__anon2
TERMINALS	multi_tree.h	/^	TERMINALS=300,$/;"	e	enum:__anon2
TEST_FILE_LIST	Makefile	/^TEST_FILE_LIST = $(shell find ..\/Test\/ -name "*.cmm")$/;"	m
Tag	multi_tree.h	/^    Tag,$/;"	e	enum:__anon2
Tag	syntax.y	/^Tag : ID {$/;"	l
Type	cmmtypes.h	/^typedef struct Type_ Type;$/;"	t	typeref:struct:Type_
Type_	cmmtypes.h	/^struct Type_{$/;"	s
Type_::__anon7::__anon8::elem	cmmtypes.h	/^            Type* elem;$/;"	m	struct:Type_::__anon7::__anon8	access:public
Type_::__anon7::__anon8::size	cmmtypes.h	/^            int size;$/;"	m	struct:Type_::__anon7::__anon8	access:public
Type_::__anon7::array	cmmtypes.h	/^        }array;$/;"	m	union:Type_::__anon7	typeref:struct:Type_::__anon7::__anon8	access:public
Type_::__anon7::basic	cmmtypes.h	/^        int basic;$/;"	m	union:Type_::__anon7	access:public
Type_::__anon7::fl	cmmtypes.h	/^        FieldList* fl;$/;"	m	union:Type_::__anon7	access:public
Type_::array	cmmtypes.h	/^        array,$/;"	e	enum:Type_::__anon6
Type_::basic	cmmtypes.h	/^        basic,$/;"	e	enum:Type_::__anon6
Type_::kind	cmmtypes.h	/^    }kind;$/;"	m	struct:Type_	typeref:enum:Type_::__anon6	access:public
Type_::semantic_error	cmmtypes.h	/^        semantic_error$/;"	e	enum:Type_::__anon6
Type_::structure	cmmtypes.h	/^        structure,$/;"	e	enum:Type_::__anon6
UTHASH_H	uthash.h	25;"	d
UTHASH_VERSION	uthash.h	76;"	d
UT_hash_bucket	uthash.h	/^typedef struct UT_hash_bucket {$/;"	s
UT_hash_bucket	uthash.h	/^} UT_hash_bucket;$/;"	t	typeref:struct:UT_hash_bucket
UT_hash_bucket::count	uthash.h	/^   unsigned count;$/;"	m	struct:UT_hash_bucket	access:public
UT_hash_bucket::expand_mult	uthash.h	/^   unsigned expand_mult;$/;"	m	struct:UT_hash_bucket	access:public
UT_hash_bucket::hh_head	uthash.h	/^   struct UT_hash_handle *hh_head;$/;"	m	struct:UT_hash_bucket	typeref:struct:UT_hash_bucket::UT_hash_handle	access:public
UT_hash_handle	uthash.h	/^typedef struct UT_hash_handle {$/;"	s
UT_hash_handle	uthash.h	/^} UT_hash_handle;$/;"	t	typeref:struct:UT_hash_handle
UT_hash_handle::hashv	uthash.h	/^   unsigned hashv;                   \/* result of hash-fcn(key)        *\/$/;"	m	struct:UT_hash_handle	access:public
UT_hash_handle::hh_next	uthash.h	/^   struct UT_hash_handle *hh_next;   \/* next hh in bucket order        *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle	access:public
UT_hash_handle::hh_prev	uthash.h	/^   struct UT_hash_handle *hh_prev;   \/* previous hh in bucket order    *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle	access:public
UT_hash_handle::key	uthash.h	/^   void *key;                        \/* ptr to enclosing struct's key  *\/$/;"	m	struct:UT_hash_handle	access:public
UT_hash_handle::keylen	uthash.h	/^   unsigned keylen;                  \/* enclosing struct's key len     *\/$/;"	m	struct:UT_hash_handle	access:public
UT_hash_handle::next	uthash.h	/^   void *next;                       \/* next element in app order      *\/$/;"	m	struct:UT_hash_handle	access:public
UT_hash_handle::prev	uthash.h	/^   void *prev;                       \/* prev element in app order      *\/$/;"	m	struct:UT_hash_handle	access:public
UT_hash_handle::tbl	uthash.h	/^   struct UT_hash_table *tbl;$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_table	access:public
UT_hash_table	uthash.h	/^typedef struct UT_hash_table {$/;"	s
UT_hash_table	uthash.h	/^} UT_hash_table;$/;"	t	typeref:struct:UT_hash_table
UT_hash_table::bloom_bv	uthash.h	/^   uint8_t *bloom_bv;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::bloom_nbits	uthash.h	/^   uint8_t bloom_nbits;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::bloom_sig	uthash.h	/^   uint32_t bloom_sig; \/* used only to test bloom exists in external analysis *\/$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::buckets	uthash.h	/^   UT_hash_bucket *buckets;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::hho	uthash.h	/^   ptrdiff_t hho; \/* hash handle offset (byte pos of hash handle in element *\/$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::ideal_chain_maxlen	uthash.h	/^   unsigned ideal_chain_maxlen;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::ineff_expands	uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::log2_num_buckets	uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::noexpand	uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::nonideal_items	uthash.h	/^   unsigned nonideal_items;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::num_buckets	uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::num_items	uthash.h	/^   unsigned num_items;$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::signature	uthash.h	/^   uint32_t signature; \/* used only to find hash tables in external analysis *\/$/;"	m	struct:UT_hash_table	access:public
UT_hash_table::tail	uthash.h	/^   struct UT_hash_handle *tail; \/* tail hh in app order, for fast append    *\/$/;"	m	struct:UT_hash_table	typeref:struct:UT_hash_table::UT_hash_handle	access:public
VarDec	syntax.y	/^VarDec : ID {$/;"	l
VarDec1	multi_tree.h	/^    VarDec1,$/;"	e	enum:__anon2
VarDec2	multi_tree.h	/^    VarDec2,$/;"	e	enum:__anon2
VarList	syntax.y	/^VarList : ParamDec COMMA VarList {$/;"	l
VarList1	multi_tree.h	/^    VarList1,$/;"	e	enum:__anon2
VarList2	multi_tree.h	/^    VarList2,$/;"	e	enum:__anon2
WP	uthash.h	543;"	d
YFC	Makefile	/^YFC = $(shell find .\/ -name "*.y" | sed s\/[^\/]*\\\\.y\/syntax.tab.c\/)$/;"	m
YFILE	Makefile	/^YFILE = $(shell find .\/ -name "*.y")$/;"	m
YFO	Makefile	/^YFO = $(YFC:.c=.o)$/;"	m
__CMMTYPES_H__	cmmtypes.h	2;"	d
__DEBUG_H__	debug.h	2;"	d
__MULTI_TREE_H__	multi_tree.h	2;"	d
__PARSER_DEBUG__	main.c	6;"	d	file:
__SEMANTIC_H__	semantic.h	2;"	d
__SYMTAB_H__	symtab.h	2;"	d
add_node	multi_tree.c	/^void add_node(MTnode* par,MTnode* child){$/;"	f	signature:(MTnode* par,MTnode* child)
add_node	multi_tree.h	/^void add_node(MTnode* par,MTnode* child);$/;"	p	signature:(MTnode* par,MTnode* child)
add_sym_name	symtab.c	/^void add_sym_name(symbol** ht, char* id_name){$/;"	f	signature:(symbol** ht, char* id_name)
add_sym_name	symtab.h	/^void add_sym_name(symbol** ht,char* id_name);$/;"	p	signature:(symbol** ht,char* id_name)
add_sym_node	symtab.c	/^void add_sym_node(symbol** ht,symbol* new_node){$/;"	f	signature:(symbol** ht,symbol* new_node)
add_sym_node	symtab.h	/^void add_sym_node(symbol** ht,symbol* new_node);$/;"	p	signature:(symbol** ht,symbol* new_node)
addr	symtab.h	/^    void* addr;$/;"	m	struct:symbol_	access:public
al_free	semantic2.c	/^void al_free(ArgList* al){$/;"	f	signature:(ArgList* al)
arg_cmp	semantic2.c	/^int arg_cmp(ArgList* alx,ArgList* aly){$/;"	f	signature:(ArgList* alx,ArgList* aly)
argamt	symtab.h	/^    int argamt;\/\/arguement amount$/;"	m	struct:symbol_	access:public
argamt_count	semantic2.c	/^int argamt_count(ArgList* al){$/;"	f	signature:(ArgList* al)
array	cmmtypes.h	/^        array,$/;"	e	enum:Type_::__anon6
array	cmmtypes.h	/^        }array;$/;"	m	union:Type_::__anon7	typeref:struct:Type_::__anon7::__anon8	access:public
basic	cmmtypes.h	/^        basic,$/;"	e	enum:Type_::__anon6
basic	cmmtypes.h	/^        int basic;$/;"	m	union:Type_::__anon7	access:public
bloom_bv	uthash.h	/^   uint8_t *bloom_bv;$/;"	m	struct:UT_hash_table	access:public
bloom_nbits	uthash.h	/^   uint8_t bloom_nbits;$/;"	m	struct:UT_hash_table	access:public
bloom_sig	uthash.h	/^   uint32_t bloom_sig; \/* used only to test bloom exists in external analysis *\/$/;"	m	struct:UT_hash_table	access:public
buckets	uthash.h	/^   UT_hash_bucket *buckets;$/;"	m	struct:UT_hash_table	access:public
ch	multi_tree.h	33;"	d
check_func	symtab.c	/^void check_func(){$/;"	f
children_amount	multi_tree.h	/^	int children_amount;$/;"	m	struct:MTnode	access:public
children_list	multi_tree.h	/^	struct MTnode** children_list;$/;"	m	struct:MTnode	typeref:struct:MTnode::MTnode	access:public
chit	multi_tree.h	35;"	d
chst	multi_tree.h	34;"	d
count	gen_func.py	/^    count = 0$/;"	v
count	gen_gram.py	/^            count = 1$/;"	v
count	gen_gram.py	/^count = 0$/;"	v
count	uthash.h	/^   unsigned count;$/;"	m	struct:UT_hash_bucket	access:public
create_node	multi_tree.c	/^MTnode* create_node(MTnode* node_list[],int list_len,char* str,YYLTYPE* loc,int type){$/;"	f	signature:(MTnode* node_list[],int list_len,char* str,YYLTYPE* loc,int type)
create_node	multi_tree.h	/^MTnode* create_node(MTnode* node_list[],int list_len,char* str,YYLTYPE* loc,int type);$/;"	p	signature:(MTnode* node_list[],int list_len,char* str,YYLTYPE* loc,int type)
dec_ed	symtab.h	/^            unsigned int dec_ed : 1;$/;"	m	struct:symbol_::__anon3::__anon4	access:public
def_ed	symtab.h	/^            unsigned int def_ed : 1;$/;"	m	struct:symbol_::__anon3::__anon4	access:public
del_sym	symtab.c	/^symbol* del_sym(symbol** ht,char* id_name){$/;"	f	signature:(symbol** ht,char* id_name)
del_sym	symtab.h	/^symbol* del_sym(symbol** ht,char* id_name);$/;"	p	signature:(symbol** ht,char* id_name)
dim	symtab.h	/^    int dim;$/;"	m	struct:symbol_	access:public
elem	cmmtypes.h	/^            Type* elem;$/;"	m	struct:Type_::__anon7::__anon8	access:public
enable_debug	main.c	/^int enable_debug = 0;$/;"	v
error_report	main.c	/^extern void error_report();$/;"	p	file:
expand_mult	uthash.h	/^   unsigned expand_mult;$/;"	m	struct:UT_hash_bucket	access:public
field_find	semantic2.c	/^Type* field_find(FieldList* fl,char* id){$/;"	f	signature:(FieldList* fl,char* id)
field_tab	symtab.c	/^symbol* field_tab = NULL;$/;"	v
find_sym	symtab.c	/^symbol* find_sym(symbol** ht,char* id_name){$/;"	f	signature:(symbol** ht,char* id_name)
find_sym	symtab.h	/^symbol* find_sym(symbol** ht,char* id_name);$/;"	p	signature:(symbol** ht,char* id_name)
fk	semantic2.c	/^typedef void (*fk)(MTnode*);$/;"	t	file:
fl	cmmtypes.h	/^        FieldList* fl;$/;"	m	union:Type_::__anon7	access:public
func_arg	symtab.h	/^    ArgList* func_arg;$/;"	m	struct:symbol_	access:public
func_dec	semantic2.c	/^int func_dec;$/;"	v
func_def	semantic2.c	/^int func_def;$/;"	v
func_list	gen_func.py	/^func_list = []$/;"	v
func_tab	symtab.c	/^symbol* func_tab = NULL;$/;"	v
func_table	semantic2.c	/^fk func_table[60] = {$/;"	v
get16bits	uthash.h	472;"	d
get16bits	uthash.h	475;"	d
get16bits	uthash.h	479;"	d
get_spec_name	semantic2.c	/^char* get_spec_name(MTnode* spec){  \/\/not tested!!$/;"	f	signature:(MTnode* spec)
get_var_id	semantic2.c	/^MTnode* get_var_id(MTnode* dec){$/;"	f	signature:(MTnode* dec)
global	semantic2.c	/^int global;$/;"	v
hashv	uthash.h	/^   unsigned hashv;                   \/* result of hash-fcn(key)        *\/$/;"	m	struct:UT_hash_handle	access:public
hh	symtab.h	/^    UT_hash_handle hh;$/;"	m	struct:symbol_	access:public
hh_head	uthash.h	/^   struct UT_hash_handle *hh_head;$/;"	m	struct:UT_hash_bucket	typeref:struct:UT_hash_bucket::UT_hash_handle	access:public
hh_next	uthash.h	/^   struct UT_hash_handle *hh_next;   \/* next hh in bucket order        *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle	access:public
hh_prev	uthash.h	/^   struct UT_hash_handle *hh_prev;   \/* previous hh in bucket order    *\/$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_handle	access:public
hho	uthash.h	/^   ptrdiff_t hho; \/* hash handle offset (byte pos of hash handle in element *\/$/;"	m	struct:UT_hash_table	access:public
id_name	symtab.h	/^    char* id_name;$/;"	m	struct:symbol_	access:public
ideal_chain_maxlen	uthash.h	/^   unsigned ideal_chain_maxlen;$/;"	m	struct:UT_hash_table	access:public
ineff_expands	uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table	access:public
inh_ctrl	multi_tree.h	/^    int inh_ctrl;$/;"	m	struct:MTnode	access:public
inh_dim	multi_tree.h	/^    int inh_dim;$/;"	m	struct:MTnode	access:public
inh_type	multi_tree.h	/^    Type* inh_type;$/;"	m	struct:MTnode	access:public
init_basic_type	semantic.h	/^void init_basic_type();$/;"	p	signature:()
init_basic_type	semantic2.c	/^void init_basic_type(){$/;"	f
init_ed	symtab.h	/^            unsigned int init_ed : 1;$/;"	m	struct:symbol_::__anon3::__anon4	access:public
inside_func	gen_func.py	/^                inside_func = 0$/;"	v
inside_func	gen_func.py	/^            inside_func = 1$/;"	v
inside_func	gen_func.py	/^inside_func = 0$/;"	v
inside_func_compst	semantic2.c	/^int inside_func_compst;$/;"	v
inside_func_para	semantic2.c	/^int inside_func_para;$/;"	v
inside_struct	semantic2.c	/^int inside_struct;$/;"	v
key	uthash.h	/^   void *key;                        \/* ptr to enclosing struct's key  *\/$/;"	m	struct:UT_hash_handle	access:public
keylen	uthash.h	/^   unsigned keylen;                  \/* enclosing struct's key len     *\/$/;"	m	struct:UT_hash_handle	access:public
kind	cmmtypes.h	/^    }kind;$/;"	m	struct:Type_	typeref:enum:Type_::__anon6	access:public
l	gen_func.py	/^                l = l.lstrip(' ')$/;"	v
l	gen_func.py	/^                l = l.lstrip('break;')$/;"	v
l	gen_func.py	/^                l = l.rstrip('\\n')$/;"	v
l	gen_func.py	/^            l = l.lstrip(' ')$/;"	v
l	gen_func.py	/^            l = l.lstrip('case')$/;"	v
l	gen_func.py	/^            l = l.rstrip(' ')$/;"	v
l	gen_func.py	/^            l = l.rstrip(':')$/;"	v
l	gen_func.py	/^            l = l.rstrip('\\n')$/;"	v
l	gen_func.py	/^        l = f.readline()$/;"	v
l	gen_func.py	/^    l = f.readline()$/;"	v
lcamt	gen_func.py	/^            lcamt = 0$/;"	v
lcamt	gen_func.py	/^lcamt = 0$/;"	v
line	gen_gram.py	/^        line = line.rstrip(' ')$/;"	v
line	gen_gram.py	/^        line = line.rstrip('\\n')$/;"	v
line	symtab.h	/^    int line;$/;"	m	struct:symbol_	access:public
lineno_init	main.c	/^extern int lineno_init();$/;"	p	file:
location	multi_tree.h	/^	YYLTYPE location;$/;"	m	struct:MTnode	access:public
locl	multi_tree.h	36;"	d
log2_num_buckets	uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table	access:public
main	main.c	/^int main(int argc,char** argv){$/;"	f	signature:(int argc,char** argv)
name	cmmtypes.h	/^    char* name; \/\/field name$/;"	m	struct:FieldList_	access:public
next	cmmtypes.h	/^    ArgList* next;$/;"	m	struct:ArgList_	access:public
next	cmmtypes.h	/^    FieldList* next; \/\/next field$/;"	m	struct:FieldList_	access:public
next	uthash.h	/^   void *next;                       \/* next element in app order      *\/$/;"	m	struct:UT_hash_handle	access:public
noexpand	uthash.h	/^   unsigned ineff_expands, noexpand;$/;"	m	struct:UT_hash_table	access:public
nonideal_items	uthash.h	/^   unsigned nonideal_items;$/;"	m	struct:UT_hash_table	access:public
num_buckets	uthash.h	/^   unsigned num_buckets, log2_num_buckets;$/;"	m	struct:UT_hash_table	access:public
num_items	uthash.h	/^   unsigned num_items;$/;"	m	struct:UT_hash_table	access:public
pre_tranverse	multi_tree.c	/^void pre_tranverse(MTnode* root){$/;"	f	signature:(MTnode* root)
pre_tranverse	multi_tree.h	/^void pre_tranverse(MTnode* root);$/;"	p	signature:(MTnode* root)
pre_tranverse2	multi_tree.c	/^void pre_tranverse2(MTnode* root,int indent){$/;"	f	signature:(MTnode* root,int indent)
prev	uthash.h	/^   void *prev;                       \/* prev element in app order      *\/$/;"	m	struct:UT_hash_handle	access:public
print_symtab	symtab.c	/^void print_symtab(symbol* ht){$/;"	f	signature:(symbol* ht)
print_symtab	symtab.h	/^void print_symtab(symbol* ht);$/;"	p	signature:(symbol* ht)
prod_name	gen_gram.py	/^            prod_name = prod_name.rstrip(' ')$/;"	v
prod_name	gen_gram.py	/^prod_name = ''$/;"	v
property	symtab.h	/^        unsigned int property;$/;"	m	union:symbol_::__anon3	access:public
s	gen_func.py	/^            s = 'Func_'+l$/;"	v
sem	semantic.h	/^void sem(MTnode* root);$/;"	p	signature:(MTnode* root)
sem	semantic2.c	/^void sem(MTnode* root){$/;"	f	signature:(MTnode* root)
semantic_error	cmmtypes.h	/^        semantic_error$/;"	e	enum:Type_::__anon6
signature	uthash.h	/^   uint32_t signature; \/* used only to find hash tables in external analysis *\/$/;"	m	struct:UT_hash_table	access:public
size	cmmtypes.h	/^            int size;$/;"	m	struct:Type_::__anon7::__anon8	access:public
str	multi_tree.h	/^	char* str;$/;"	m	struct:MTnode	access:public
struct_tab	symtab.c	/^symbol* struct_tab = NULL;$/;"	v
structure	cmmtypes.h	/^        structure,$/;"	e	enum:Type_::__anon6
symbol	symtab.h	/^typedef struct symbol_ symbol;$/;"	t	typeref:struct:symbol_
symbol_	symtab.h	/^struct symbol_{$/;"	s
symbol_::__anon3::__anon4::dec_ed	symtab.h	/^            unsigned int dec_ed : 1;$/;"	m	struct:symbol_::__anon3::__anon4	access:public
symbol_::__anon3::__anon4::def_ed	symtab.h	/^            unsigned int def_ed : 1;$/;"	m	struct:symbol_::__anon3::__anon4	access:public
symbol_::__anon3::__anon4::init_ed	symtab.h	/^            unsigned int init_ed : 1;$/;"	m	struct:symbol_::__anon3::__anon4	access:public
symbol_::__anon3::property	symtab.h	/^        unsigned int property;$/;"	m	union:symbol_::__anon3	access:public
symbol_::__anon5::val_float	symtab.h	/^        float val_float;$/;"	m	union:symbol_::__anon5	access:public
symbol_::__anon5::val_int	symtab.h	/^        int val_int;$/;"	m	union:symbol_::__anon5	access:public
symbol_::addr	symtab.h	/^    void* addr;$/;"	m	struct:symbol_	access:public
symbol_::argamt	symtab.h	/^    int argamt;\/\/arguement amount$/;"	m	struct:symbol_	access:public
symbol_::dim	symtab.h	/^    int dim;$/;"	m	struct:symbol_	access:public
symbol_::func_arg	symtab.h	/^    ArgList* func_arg;$/;"	m	struct:symbol_	access:public
symbol_::hh	symtab.h	/^    UT_hash_handle hh;$/;"	m	struct:symbol_	access:public
symbol_::id_name	symtab.h	/^    char* id_name;$/;"	m	struct:symbol_	access:public
symbol_::line	symtab.h	/^    int line;$/;"	m	struct:symbol_	access:public
symbol_::val_type	symtab.h	/^    Type* val_type;\/\/int float user_struct$/;"	m	struct:symbol_	access:public
syn_al	multi_tree.h	/^    ArgList* syn_al;$/;"	m	struct:MTnode	access:public
syn_fl	multi_tree.h	/^    FieldList* syn_fl;$/;"	m	struct:MTnode	access:public
syn_type	multi_tree.h	/^    Type* syn_type;$/;"	m	struct:MTnode	access:public
tail	cmmtypes.h	/^    FieldList* tail; \/\/$/;"	m	struct:FieldList_	access:public
tail	uthash.h	/^   struct UT_hash_handle *tail; \/* tail hh in app order, for fast append    *\/$/;"	m	struct:UT_hash_table	typeref:struct:UT_hash_table::UT_hash_handle	access:public
tbl	uthash.h	/^   struct UT_hash_table *tbl;$/;"	m	struct:UT_hash_handle	typeref:struct:UT_hash_handle::UT_hash_table	access:public
type	cmmtypes.h	/^    Type* type; \/\/field type$/;"	m	struct:FieldList_	access:public
type	cmmtypes.h	/^    Type* type;$/;"	m	struct:ArgList_	access:public
type	multi_tree.h	/^	int type;$/;"	m	struct:MTnode	access:public
type_cmp	semantic2.c	/^int type_cmp(Type* tx,Type* ty){$/;"	f	signature:(Type* tx,Type* ty)
type_error	semantic.h	/^Type* type_error;$/;"	v
type_float	semantic.h	/^Type* type_float;$/;"	v
type_int	semantic.h	/^Type* type_int;$/;"	v
uint32_t	uthash.h	/^typedef unsigned int uint32_t;$/;"	t
uint8_t	uthash.h	/^typedef unsigned char uint8_t;$/;"	t
uthash_expand_fyi	uthash.h	92;"	d
uthash_fatal	uthash.h	79;"	d
uthash_free	uthash.h	85;"	d
uthash_malloc	uthash.h	82;"	d
uthash_noexpand_fyi	uthash.h	89;"	d
val_float	symtab.h	/^        float val_float;$/;"	m	union:symbol_::__anon5	access:public
val_int	symtab.h	/^        int val_int;$/;"	m	union:symbol_::__anon5	access:public
val_type	symtab.h	/^    Type* val_type;\/\/int float user_struct$/;"	m	struct:symbol_	access:public
valf	multi_tree.h	/^        double valf;$/;"	m	union:MTnode::__anon1	access:public
valt	multi_tree.h	/^        int valt;$/;"	m	union:MTnode::__anon1	access:public
var_tab	symtab.c	/^symbol* var_tab = NULL;$/;"	v
yyrestart	main.c	/^extern void yyrestart(FILE* f);$/;"	p	file:	signature:(FILE* f)
